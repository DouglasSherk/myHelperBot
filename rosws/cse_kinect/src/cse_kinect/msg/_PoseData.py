"""autogenerated by genmsg_py from PoseData.msg. Do not edit."""
import roslib.message
import struct


class PoseData(roslib.message.Message):
  _md5sum = "1261c601270ddadfdc36b3c644334171"
  _type = "cse_kinect/PoseData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool pose1
bool pose2
bool lVoila
bool rVoila
bool flat

"""
  __slots__ = ['pose1','pose2','lVoila','rVoila','flat']
  _slot_types = ['bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       pose1,pose2,lVoila,rVoila,flat
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(PoseData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pose1 is None:
        self.pose1 = False
      if self.pose2 is None:
        self.pose2 = False
      if self.lVoila is None:
        self.lVoila = False
      if self.rVoila is None:
        self.rVoila = False
      if self.flat is None:
        self.flat = False
    else:
      self.pose1 = False
      self.pose2 = False
      self.lVoila = False
      self.rVoila = False
      self.flat = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.pose1, _x.pose2, _x.lVoila, _x.rVoila, _x.flat))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.pose1, _x.pose2, _x.lVoila, _x.rVoila, _x.flat,) = _struct_5B.unpack(str[start:end])
      self.pose1 = bool(self.pose1)
      self.pose2 = bool(self.pose2)
      self.lVoila = bool(self.lVoila)
      self.rVoila = bool(self.rVoila)
      self.flat = bool(self.flat)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.pose1, _x.pose2, _x.lVoila, _x.rVoila, _x.flat))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.pose1, _x.pose2, _x.lVoila, _x.rVoila, _x.flat,) = _struct_5B.unpack(str[start:end])
      self.pose1 = bool(self.pose1)
      self.pose2 = bool(self.pose2)
      self.lVoila = bool(self.lVoila)
      self.rVoila = bool(self.rVoila)
      self.flat = bool(self.flat)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_5B = struct.Struct("<5B")
